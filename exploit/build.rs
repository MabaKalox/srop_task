use std::env;
use std::path::PathBuf;

fn main() {
    let rt_sigframe_h = PathBuf::from("linux_structs/rt_sigframe.h");
    println!("cargo::rerun-if-changed={}", rt_sigframe_h.display());

    let out_dir = PathBuf::from(env::var("OUT_DIR").unwrap());
    let artifact_dir = out_dir.ancestors().nth(3).unwrap();

    // Generate object file with debug symbols for gdb
    println!("cargo::rerun-if-changed=linux_structs/dummy.c");
    let dummy_o = cc::Build::new()
        .file("linux_structs/dummy.c")
        .debug(true)
        .flag("-Wno-unused-variable")
        .compile_intermediates()
        .pop()
        .unwrap();
    std::fs::copy(dummy_o, artifact_dir.join("dummy.o")).unwrap();

    // Generate rt_sigframe bindings
    bindgen::Builder::default()
        .header(rt_sigframe_h.to_str().unwrap())
        .parse_callbacks(Box::new(bindgen::CargoCallbacks::new()))
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(out_dir.join("bindings.rs"))
        .expect("Couldn't write bindings!");
}
